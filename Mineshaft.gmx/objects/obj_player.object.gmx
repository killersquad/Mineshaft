<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-19</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 0;
image_speed = 0;


instance_create(x,y,obj_head)
instance_create(x,y,obj_mouse)

global.facing = 1;

//1=right
//-1=left


render = true
vsp = 0;
hsp = 0;
grounded = 0;
jump = false;
grav = .8;
lp = 0;
rp = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rp = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lp = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if rp = 1
{
    rp = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if lp = 1
{
    lp = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// countrols
key_left = keyboard_check_direct(ord("A"));
key_leftp = keyboard_check_pressed(ord("A"));
key_right = keyboard_check_direct(ord("D"));
key_rightp = keyboard_check_pressed(ord("D"));
key_jump = keyboard_check_direct(vk_space);


//Makes you not move when inventory is open
if obj_inv.inventory = false
{
//movement
//left press
if (key_left) &amp;&amp; (!key_right)
{
    global.facing = -1;
    image_xscale = -1;
    image_speed = 10;
    rp = 0;
    if (lp = 1 or lp = 0)
    {
        image_speed = 8;
        hsp = -3
        alarm[2] = 180
    }
    if (lp = 2)
    {
        hsp = -6
    }
}
if (key_leftp) 
{
    lp += 1;
    alarm[0] = 10
}
//right press
if(key_right) &amp;&amp; (!key_left)
{
    global.facing = 1;
    image_xscale = 1;
    image_speed = 10;
    lp = 0;
    if (rp = 1 or rp = 0)
    {
        image_speed = 8;
        hsp = 3
        alarm[3] = 180
    }
    if (rp = 2)
    {
        hsp = 6
    }
}
if(key_rightp)
{
    rp += 1;
    alarm[1] = 10;
}
}

//makeing sure ip&lt;3 and rp&lt;3
if lp &gt;= 3
{
    lp = 0
}
if rp &gt;= 3
{
    rp = 0
}

//no controls
if (!key_left &amp;&amp; !key_right)
{
    image_speed = 0;
    image_index = 0;
    hsp = 0;
    if lp = 2
    {
        lp = 0;
    }
    if rp = 2
    {
        rp = 0;
    }
}
if (key_right &amp;&amp; key_left)
{
    hsp = 0;
    lp = 0;
    rp = 0;
}

//makes you not jump when inv is open
if obj_inv.inventory = false
{
//Jumping
if(key_jump)
{
    if grounded != 0 &amp;&amp; jump = true
    {
        vsp = -8;
    }
}
}

vsp += grav;

// vertical collision
if place_meeting(x,y+vsp,obj_block)
{
    while (!place_meeting(x,y+sign(vsp),obj_block)) y += sign(vsp);
    if (vsp &gt;= 0) or jump = false
    {
        vsp = 0;
    }
    grounded = 1;
}
else
{
    grounded = 0;
}

//Glitch fixing
if global.facing = 1
{
    if place_meeting (x+2,y+1,obj_block)
    {
        jump = true;
    }
    else
    {
        jump = false;
    }
    if place_meeting (x-2,y-3,obj_block)
    {
        jump = false;
    }
}
if global.facing = -1
{
    if place_meeting (x-2,y+1,obj_block)
    {
        jump = true;
    }
    else
    {
        jump = false;
    }
    if place_meeting (x+2,y-3,obj_block)
    {
        jump = false;
    }
}

//horizontal collision
if place_meeting(x+hsp,y,obj_block)
{
    while (!place_meeting(x+sign(hsp),y,obj_block)) x += sign(hsp);
    hsp = 0;
    rp = 0;
    lp = 0;
}

//commit movement
x += hsp;
y += vsp;

// view
view_xview[0] = x - (view_wview[0]/2);
view_yview[0] = y - (view_hview[0]/2);

if global.facing == 1
{
    if (x &gt;= (global.chunk/2) &amp;&amp; render)
    {
        render = false;
        global.chunk = scr_generate(global.chunk);
        render = true
    }
}
else
{
    if global.facing == -1
    {
        if (x &lt;= (global.chunk2/2) &amp;&amp; render)
        {
            render = false;
            global.chunk2 = scr_generate(global.chunk2 - (1728*2));
            render = true
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_break">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Diagonal Collison check
var dist,dir,xdir,ydir;
dist=point_distance(x,y,xprevious,yprevious);
dir=degtorad(point_direction(xprevious,yprevious,x,y));
xdir=cos(dir);
ydir=-sin(dir);
x=xprevious;
y=yprevious;
repeat dist{ if place_meeting(x+xdir,y,obj_block) { hsp=0; } else { x+=xdir; } if place_meeting(x,y+ydir,obj_block) { vsp = 0; } else { y+=ydir; }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
